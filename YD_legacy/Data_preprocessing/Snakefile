import os
import fnmatch

########################################################
# global varibales
# 1. modify global varibales here
# 2. modify cluster.json
########################################################
workflow_dir = os.path.dirname(workflow.basedir)

rawData_dir = "/data/proj/GCB_MB/spatial_cut-tag/Yale_Apr_2022_nano_Tn5/raw_data/"  # raw sequencing data directory
processedData_dir = '/data/proj/GCB_MB/spatial_cut-tag/Yale_Apr_2022_nano_Tn5/processed_data/'  # processed sequencing data directory
fastq_ext = '.fq.gz'  # fastq file extension

core = 20  # threads to use
core_cellRanger = int(core * 0.8)  # threads to use in cellRanger
mem = 64  # memory to use in cellRanger

bbduk_dir = "/home/marek/bin/bbmap/bbduk.sh"  # bbduk.sh directory
cellranger_dir = "/data/bin/cellranger-atac"  # cellranger-atac directory
ref_dir = "/data/ref/cellranger-atac/refdata-cellranger-atac-mm10-2020-A-2.0.0/"  # reference data directory

# barcodes =
########################################################

########################################################
# Do not change codes below
########################################################

samples = os.listdir(rawData_dir)
output = [processedData_dir + '/' + sample + '/CellRanger/' + sample + '/outs/fragments.tsv.gz' for sample in samples]

list_fastq = {}
for sample in samples:
    print(sample)
    list_fastq[sample] = (fnmatch.filter(os.listdir(rawData_dir + '/' + sample),'*1' + fastq_ext)[0].split(".")[0],
                          fnmatch.filter(os.listdir(rawData_dir + '/' + sample),'*2' + fastq_ext)[0].split(".")[0])

# generating folders

for sample in samples:

    output_dir = processedData_dir + '/' + sample + '/CellRanger'
    tmp_data = output_dir + '/tmp_data'
    qc_raw_data = tmp_data + '/qc_raw_data'
    log_dir = output_dir + '/log'

    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    if not os.path.exists(tmp_data):
        os.makedirs(tmp_data)
    if not os.path.exists(qc_raw_data):
        os.makedirs(qc_raw_data)
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)


rule all:
    input:
        output
